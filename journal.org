#+TITLE: Advent of Code 2024 Journal
#+AUTHOR: Tim Pepper

* Day 1
** DONE Challenge 1
This one was pretty easy, I have to imagine this was mostly to make sure people understood the puzzle format, and how to parse the test data.
** DONE Challenge 2
Similar to challenge 1, just some different data manipulation here.
* Day 2
** DONE Challenge 1
This one absolutely kicked my butt. Huge difficulty spike on day 2. I did learn about iterator *windows* with rust, which was pretty cool. Being able to safely traverse an iterator is super smart, I wish more languages did that by default. I got hung up evaluating the first match in the list for awhile, and I sort of got lucky just searching through the test data until I found an obvious failure case. Not my best work here, but it did the thing!
** DONE Challenge 2
Equally challenging problem here. Despite being technically more permissive, the rules forced me to go and do multiple additional checks, removing either the first potential error index, the second, or the first value in the line to attempt to validate a "safe" code. It didn't take me as long as the challenge 1 solution to figure out, but I think that was more due to my energy level and the fact that this solution easily extended the first more than anything else.
* Day 3
** DONE Challenge 1
Back to an extremely trivial challenge. I used regex crate to find the multiplier string, and its capture_iter format and function to pull out the digits, and the rest is history.
** DONE Challenge 2
Of course now I need to be able to index the keywords in the string... +So regex is out...+ I lied!! I just decided to full send in to regex instead. In order to solve this problem I stacked my original solution of finding the mul() blocks with a fairly complex indexing process where I found the indices of all "do", "dont", and "mul" instances, related them all to either -1, -2, or the value of the multiply, respectively, aggregated and sorted them, and then iterated over the resulting vector, adding as needed when "do" was true. I consider this a fairly janky solution, but in good Rust fashion it just worked once I got the code compiling, and it wasn't nearly as slow as I was expecting given the state of the code... Not proud, but happy!!

Claude helped me rewrite my code to be a bit more idiomatic Rust-y, which is cool. I think it actually slowed my solution down some, but I am happy to be learning how to think more Rust-y.
* Day 4
** STRT Challenge 1
I have put in a few iterations on this and I think I'm finally wrapping my head around the algorithm needed to solve this problem. Basically I need to search for all the Xs in the matrix, and then search in all in_bounds directions around the X for an M, if I find an M I can take that direction and look ahead for A and S. If I don't find anything on that line I need to keep searching around the X until I either find XMAS, or find nothing, and continue, counting along the way.

Currently I am experiencing a lot of code duplication, but I think I should be able to get something working after stewing on this a bit.
** TODO Challenge 2
